raeltimejobs from bot

import React, { useState, useEffect } from 'react';
import { TrendingUp, Plus, Save, Edit3, Trash2, Search, ChevronUp, ChevronDown, Building2, Eye, X, Download, Upload } from 'lucide-react';

function Analytics() {
  const [records, setRecords] = useState([]);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [isDetailOpen, setIsDetailOpen] = useState(false);
  const [editingRecord, setEditingRecord] = useState(null);
  const [viewingRecord, setViewingRecord] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' });
  const [formData, setFormData] = useState({
    title: '',
    category: '',
    subcategory: '',
    type: '',
    value: '',
    status: 'active',
    description: '',
    details: {}
  });

  // Dependent options configuration
  const categoryOptions = {
    revenue: {
      label: 'Revenue',
      subcategories: {
        sales: {
          label: 'Sales',
          types: ['monthly', 'quarterly', 'annual'],
          fields: ['target', 'achieved', 'variance', 'region']
        },
        subscription: {
          label: 'Subscription',
          types: ['new', 'renewal', 'churn'],
          fields: ['plan_type', 'mrr', 'customer_count', 'retention_rate']
        },
        product: {
          label: 'Product Revenue',
          types: ['digital', 'physical', 'service'],
          fields: ['product_name', 'units_sold', 'price_per_unit', 'total_revenue']
        }
      }
    },
    customers: {
      label: 'Customers',
      subcategories: {
        acquisition: {
          label: 'Customer Acquisition',
          types: ['organic', 'paid', 'referral'],
          fields: ['source', 'cost_per_acquisition', 'conversion_rate', 'lifetime_value']
        },
        retention: {
          label: 'Customer Retention',
          types: ['monthly', 'quarterly', 'annual'],
          fields: ['retention_rate', 'churn_rate', 'satisfaction_score', 'support_tickets']
        },
        engagement: {
          label: 'Customer Engagement',
          types: ['email', 'social', 'app'],
          fields: ['engagement_rate', 'click_through_rate', 'time_spent', 'interactions']
        }
      }
    },
    performance: {
      label: 'Performance',
      subcategories: {
        system: {
          label: 'System Performance',
          types: ['server', 'database', 'api'],
          fields: ['uptime', 'response_time', 'error_rate', 'throughput']
        },
        team: {
          label: 'Team Performance',
          types: ['productivity', 'quality', 'efficiency'],
          fields: ['tasks_completed', 'quality_score', 'hours_worked', 'goals_met']
        },
        financial: {
          label: 'Financial Performance',
          types: ['profit', 'cost', 'roi'],
          fields: ['gross_margin', 'operating_expenses', 'net_profit', 'roi_percentage']
        }
      }
    },
    marketing: {
      label: 'Marketing',
      subcategories: {
        campaigns: {
          label: 'Marketing Campaigns',
          types: ['email', 'social', 'ppc', 'content'],
          fields: ['campaign_name', 'budget', 'reach', 'conversions', 'roi']
        },
        content: {
          label: 'Content Marketing',
          types: ['blog', 'video', 'social', 'webinar'],
          fields: ['content_title', 'views', 'engagement', 'leads_generated']
        },
        seo: {
          label: 'SEO Performance',
          types: ['organic', 'local', 'technical'],
          fields: ['keyword_ranking', 'organic_traffic', 'backlinks', 'page_speed']
        }
      }
    }
  };

  // Load records from JSON file simulation (localStorage for now)
  useEffect(() => {
    loadRecords();
  }, []);

  const loadRecords = () => {
    try {
      const savedRecords = localStorage.getItem('analyticsRecords');
      if (savedRecords) {
        setRecords(JSON.parse(savedRecords));
      } else {
        // Initialize with sample data
        const sampleRecords = [
          {
            id: 1,
            title: 'Q1 Sales Performance',
            category: 'revenue',
            subcategory: 'sales',
            type: 'quarterly',
            value: '$1.2M',
            status: 'completed',
            description: 'First quarter sales achievement',
            details: {
              target: '$1.0M',
              achieved: '$1.2M',
              variance: '+20%',
              region: 'North America'
            },
            createdAt: new Date().toISOString()
          },
          {
            id: 2,
            title: 'Customer Acquisition Campaign',
            category: 'customers',
            subcategory: 'acquisition',
            type: 'paid',
            value: '2,450',
            status: 'active',
            description: 'Paid advertising customer acquisition',
            details: {
              source: 'Google Ads',
              cost_per_acquisition: '$45',
              conversion_rate: '3.2%',
              lifetime_value: '$850'
            },
            createdAt: new Date().toISOString()
          },
          {
            id: 3,
            title: 'System Uptime Monitoring',
            category: 'performance',
            subcategory: 'system',
            type: 'server',
            value: '99.9%',
            status: 'active',
            description: 'Server uptime performance tracking',
            details: {
              uptime: '99.9%',
              response_time: '120ms',
              error_rate: '0.1%',
              throughput: '1000 req/sec'
            },
            createdAt: new Date().toISOString()
          },
          {
            id: 4,
            title: 'Email Marketing Campaign',
            category: 'marketing',
            subcategory: 'campaigns',
            type: 'email',
            value: '15.2%',
            status: 'completed',
            description: 'Monthly newsletter campaign performance',
            details: {
              campaign_name: 'Monthly Newsletter',
              budget: '$5,000',
              reach: '50,000',
              conversions: '760',
              roi: '320%'
            },
            createdAt: new Date().toISOString()
          }
        ];
        setRecords(sampleRecords);
        saveRecords(sampleRecords);
      }
    } catch (error) {
      console.error('Error loading records:', error);
    }
  };

  const saveRecords = (recordsToSave) => {
    try {
      localStorage.setItem('analyticsRecords', JSON.stringify(recordsToSave));
      // In a real application, this would save to a JSON file on the server
      console.log('Records saved to JSON file simulation');
    } catch (error) {
      console.error('Error saving records:', error);
    }
  };

  const exportToJSON = () => {
    const dataStr = JSON.stringify(records, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    const exportFileDefaultName = 'analytics_records.json';
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
  };

  const importFromJSON = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const importedRecords = JSON.parse(e.target.result);
          setRecords(importedRecords);
          saveRecords(importedRecords);
          alert('Records imported successfully!');
        } catch (error) {
          alert('Error importing file. Please check the JSON format.');
        }
      };
      reader.readAsText(file);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => {
      const newData = { ...prev, [name]: value };
      
      // Reset dependent fields when parent changes
      if (name === 'category') {
        newData.subcategory = '';
        newData.type = '';
        newData.details = {};
      } else if (name === 'subcategory') {
        newData.type = '';
        newData.details = {};
      } else if (name === 'type') {
        // Initialize details object with empty fields
        const fields = getFieldsForSelection(newData.category, newData.subcategory);
        newData.details = fields.reduce((acc, field) => {
          acc[field] = '';
          return acc;
        }, {});
      }
      
      return newData;
    });
  };

  const handleDetailChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      details: {
        ...prev.details,
        [field]: value
      }
    }));
  };

  const getSubcategories = (category) => {
    return category ? categoryOptions[category]?.subcategories || {} : {};
  };

  const getTypes = (category, subcategory) => {
    return category && subcategory ? categoryOptions[category]?.subcategories[subcategory]?.types || [] : [];
  };

  const getFieldsForSelection = (category, subcategory) => {
    return category && subcategory ? categoryOptions[category]?.subcategories[subcategory]?.fields || [] : [];
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    const newRecords = editingRecord 
      ? records.map(record => 
          record.id === editingRecord.id 
            ? { ...formData, id: editingRecord.id, createdAt: editingRecord.createdAt, updatedAt: new Date().toISOString() }
            : record
        )
      : [...records, { ...formData, id: Date.now(), createdAt: new Date().toISOString() }];

    setRecords(newRecords);
    saveRecords(newRecords);
    resetForm();
  };

  const resetForm = () => {
    setFormData({
      title: '',
      category: '',
      subcategory: '',
      type: '',
      value: '',
      status: 'active',
      description: '',
      details: {}
    });
    setIsFormOpen(false);
    setEditingRecord(null);
  };

  const handleEdit = (record) => {
    setFormData({
      title: record.title,
      category: record.category,
      subcategory: record.subcategory,
      type: record.type,
      value: record.value,
      status: record.status,
      description: record.description,
      details: record.details || {}
    });
    setEditingRecord(record);
    setIsFormOpen(true);
  };

  const handleView = (record) => {
    setViewingRecord(record);
    setIsDetailOpen(true);
  };

  const handleDelete = (id) => {
    if (window.confirm('Are you sure you want to delete this record?')) {
      const newRecords = records.filter(record => record.id !== id);
      setRecords(newRecords);
      saveRecords(newRecords);
    }
  };

  const handleSort = (key) => {
    let direction = 'asc';
    if (sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
  };

  const getSortIcon = (columnKey) => {
    if (sortConfig.key !== columnKey) {
      return <ChevronUp className="w-4 h-4 text-gray-400" />;
    }
    return sortConfig.direction === 'asc' 
      ? <ChevronUp className="w-4 h-4 text-blue-600" />
      : <ChevronDown className="w-4 h-4 text-blue-600" />;
  };

  // Filter and sort records
  const filteredAndSortedRecords = React.useMemo(() => {
    let filtered = records.filter(record =>
      record.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      record.value.toLowerCase().includes(searchTerm.toLowerCase()) ||
      record.category.toLowerCase().includes(searchTerm.toLowerCase()) ||
      record.subcategory.toLowerCase().includes(searchTerm.toLowerCase()) ||
      record.type.toLowerCase().includes(searchTerm.toLowerCase()) ||
      record.status.toLowerCase().includes(searchTerm.toLowerCase()) ||
      record.description.toLowerCase().includes(searchTerm.toLowerCase())
    );

    if (sortConfig.key) {
      filtered.sort((a, b) => {
        let aValue = a[sortConfig.key];
        let bValue = b[sortConfig.key];

        if (sortConfig.key === 'createdAt') {
          aValue = new Date(aValue);
          bValue = new Date(bValue);
        }

        if (aValue < bValue) {
          return sortConfig.direction === 'asc' ? -1 : 1;
        }
        if (aValue > bValue) {
          return sortConfig.direction === 'asc' ? 1 : -1;
        }
        return 0;
      });
    }

    return filtered;
  }, [records, searchTerm, sortConfig]);

  const getCategoryColor = (category) => {
    const colors = {
      revenue: 'bg-green-100 text-green-800',
      customers: 'bg-blue-100 text-blue-800',
      performance: 'bg-purple-100 text-purple-800',
      marketing: 'bg-orange-100 text-orange-800'
    };
    return colors[category] || 'bg-gray-100 text-gray-800';
  };

  const getStatusColor = (status) => {
    const colors = {
      active: 'bg-green-100 text-green-800',
      completed: 'bg-blue-100 text-blue-800',
      pending: 'bg-yellow-100 text-yellow-800',
      cancelled: 'bg-red-100 text-red-800'
    };
    return colors[status] || 'bg-gray-100 text-gray-800';
  };

  return (
    <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {/* Page Header with Logo */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-6">
            {/* Company Logo */}
            <div className="bg-white/90 backdrop-blur-sm rounded-xl p-4 shadow-lg border border-white/20">
              <div className="w-16 h-16 bg-gradient-to-br from-blue-600 to-blue-700 rounded-full flex items-center justify-center">
                <Building2 className="w-8 h-8 text-white" />
              </div>
            </div>
            <div>
              <h1 className="text-3xl font-bold text-white mb-2">Analytics Dashboard</h1>
              <p className="text-blue-100">Manage and track your analytics records</p>
            </div>
          </div>
          <div className="flex space-x-3">
            <button
              onClick={exportToJSON}
              className="bg-white/90 hover:bg-white text-blue-600 px-4 py-2 rounded-lg font-medium transition-colors duration-200 flex items-center space-x-2 shadow-lg"
            >
              <Download className="w-4 h-4" />
              <span>Export</span>
            </button>
            <label className="bg-white/90 hover:bg-white text-blue-600 px-4 py-2 rounded-lg font-medium transition-colors duration-200 flex items-center space-x-2 shadow-lg cursor-pointer">
              <Upload className="w-4 h-4" />
              <span>Import</span>
              <input
                type="file"
                accept=".json"
                onChange={importFromJSON}
                className="hidden"
              />
            </label>
            <button
              onClick={() => setIsFormOpen(true)}
              className="bg-white/90 hover:bg-white text-blue-600 px-6 py-3 rounded-lg font-medium transition-colors duration-200 flex items-center space-x-2 shadow-lg"
            >
              <Plus className="w-5 h-5" />
              <span>Add Record</span>
            </button>
          </div>
        </div>
      </div>

      {/* Search Bar */}
      <div className="mb-6">
        <div className="relative max-w-md">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          <input
            type="text"
            placeholder="Search records..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-3 bg-white/90 backdrop-blur-sm border border-white/20 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent shadow-lg"
          />
        </div>
      </div>

      {/* Analytics Table */}
      <div className="bg-white/90 backdrop-blur-sm rounded-xl shadow-lg border border-white/20 overflow-hidden">
        <div className="bg-blue-600 text-white p-4 font-semibold text-lg">
          Analytics Records ({filteredAndSortedRecords.length})
        </div>
        
        {filteredAndSortedRecords.length === 0 ? (
          <div className="text-center py-12">
            <TrendingUp className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-600">
              {searchTerm ? 'No records match your search.' : 'No records found. Add your first analytics record!'}
            </p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th 
                    className="px-6 py-4 text-left text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100 transition-colors duration-200"
                    onClick={() => handleSort('title')}
                  >
                    <div className="flex items-center space-x-1">
                      <span>Title</span>
                      {getSortIcon('title')}
                    </div>
                  </th>
                  <th 
                    className="px-6 py-4 text-left text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100 transition-colors duration-200"
                    onClick={() => handleSort('category')}
                  >
                    <div className="flex items-center space-x-1">
                      <span>Category</span>
                      {getSortIcon('category')}
                    </div>
                  </th>
                  <th 
                    className="px-6 py-4 text-left text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100 transition-colors duration-200"
                    onClick={() => handleSort('value')}
                  >
                    <div className="flex items-center space-x-1">
                      <span>Value</span>
                      {getSortIcon('value')}
                    </div>
                  </th>
                  <th 
                    className="px-6 py-4 text-left text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100 transition-colors duration-200"
                    onClick={() => handleSort('status')}
                  >
                    <div className="flex items-center space-x-1">
                      <span>Status</span>
                      {getSortIcon('status')}
                    </div>
                  </th>
                  <th 
                    className="px-6 py-4 text-left text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100 transition-colors duration-200"
                    onClick={() => handleSort('createdAt')}
                  >
                    <div className="flex items-center space-x-1">
                      <span>Created</span>
                      {getSortIcon('createdAt')}
                    </div>
                  </th>
                  <th className="px-6 py-4 text-left text-sm font-medium text-gray-700">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {filteredAndSortedRecords.map((record) => (
                  <tr key={record.id} className="hover:bg-gray-50 transition-colors duration-200">
                    <td className="px-6 py-4">
                      <div>
                        <div className="text-sm font-semibold text-gray-800">{record.title}</div>
                        <div className="text-xs text-gray-500 mt-1">
                          {categoryOptions[record.category]?.subcategories[record.subcategory]?.label} - {record.type}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <span className={`px-3 py-1 rounded-full text-xs font-medium ${getCategoryColor(record.category)}`}>
                        {categoryOptions[record.category]?.label}
                      </span>
                    </td>
                    <td className="px-6 py-4">
                      <div className="text-lg font-bold text-blue-600">{record.value}</div>
                    </td>
                    <td className="px-6 py-4">
                      <span className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(record.status)}`}>
                        {record.status}
                      </span>
                    </td>
                    <td className="px-6 py-4">
                      <div className="text-sm text-gray-600">
                        {new Date(record.createdAt).toLocaleDateString()}
                      </div>
                      {record.updatedAt && (
                        <div className="text-xs text-gray-500">
                          Updated: {new Date(record.updatedAt).toLocaleDateString()}
                        </div>
                      )}
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex space-x-2">
                        <button
                          onClick={() => handleView(record)}
                          className="p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors duration-200"
                          title="View details"
                        >
                          <Eye className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => handleEdit(record)}
                          className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors duration-200"
                          title="Edit record"
                        >
                          <Edit3 className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => handleDelete(record.id)}
                          className="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors duration-200"
                          title="Delete record"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Form Modal */}
      {isFormOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="bg-blue-600 text-white p-4 rounded-t-xl">
              <h2 className="text-xl font-semibold">
                {editingRecord ? 'Edit Record' : 'Add New Record'}
              </h2>
            </div>
            
            <form onSubmit={handleSubmit} className="p-6 space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Title</label>
                  <input
                    type="text"
                    name="title"
                    value={formData.title}
                    onChange={handleInputChange}
                    required
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Enter record title"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Value</label>
                  <input
                    type="text"
                    name="value"
                    value={formData.value}
                    onChange={handleInputChange}
                    required
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="e.g., $1.2M, 1,500, 95%"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
                  <select
                    name="category"
                    value={formData.category}
                    onChange={handleInputChange}
                    required
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Select Category</option>
                    {Object.entries(categoryOptions).map(([key, option]) => (
                      <option key={key} value={key}>{option.label}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Subcategory</label>
                  <select
                    name="subcategory"
                    value={formData.subcategory}
                    onChange={handleInputChange}
                    required
                    disabled={!formData.category}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100"
                  >
                    <option value="">Select Subcategory</option>
                    {Object.entries(getSubcategories(formData.category)).map(([key, option]) => (
                      <option key={key} value={key}>{option.label}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Type</label>
                  <select
                    name="type"
                    value={formData.type}
                    onChange={handleInputChange}
                    required
                    disabled={!formData.subcategory}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100"
                  >
                    <option value="">Select Type</option>
                    {getTypes(formData.category, formData.subcategory).map((type) => (
                      <option key={type} value={type}>{type.charAt(0).toUpperCase() + type.slice(1)}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                  <select
                    name="status"
                    value={formData.status}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="active">Active</option>
                    <option value="completed">Completed</option>
                    <option value="pending">Pending</option>
                    <option value="cancelled">Cancelled</option>
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <textarea
                  name="description"
                  value={formData.description}
                  onChange={handleInputChange}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Optional description"
                />
              </div>

              {/* Dynamic Detail Fields */}
              {formData.type && (
                <div>
                  <h3 className="text-lg font-medium text-gray-800 mb-3">Additional Details</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {getFieldsForSelection(formData.category, formData.subcategory).map((field) => (
                      <div key={field}>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          {field.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                        </label>
                        <input
                          type="text"
                          value={formData.details[field] || ''}
                          onChange={(e) => handleDetailChange(field, e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          placeholder={`Enter ${field.replace(/_/g, ' ')}`}
                        />
                      </div>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex space-x-3 pt-4">
                <button
                  type="submit"
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors duration-200 flex items-center justify-center space-x-2"
                >
                  <Save className="w-4 h-4" />
                  <span>{editingRecord ? 'Update' : 'Save'}</span>
                </button>
                <button
                  type="button"
                  onClick={resetForm}
                  className="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-2 rounded-lg font-medium transition-colors duration-200"
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Detail View Modal */}
      {isDetailOpen && viewingRecord && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="bg-blue-600 text-white p-4 rounded-t-xl flex items-center justify-between">
              <h2 className="text-xl font-semibold">Record Details</h2>
              <button
                onClick={() => setIsDetailOpen(false)}
                className="text-white hover:bg-blue-700 p-1 rounded"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
            
            <div className="p-6 space-y-6">
              <div>
                <h3 className="text-2xl font-bold text-gray-800 mb-2">{viewingRecord.title}</h3>
                <p className="text-gray-600">{viewingRecord.description}</p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-500">Category</label>
                  <p className="text-lg font-semibold text-gray-800">
                    {categoryOptions[viewingRecord.category]?.label}
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-500">Subcategory</label>
                  <p className="text-lg font-semibold text-gray-800">
                    {categoryOptions[viewingRecord.category]?.subcategories[viewingRecord.subcategory]?.label}
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-500">Type</label>
                  <p className="text-lg font-semibold text-gray-800">
                    {viewingRecord.type?.charAt(0).toUpperCase() + viewingRecord.type?.slice(1)}
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-500">Value</label>
                  <p className="text-2xl font-bold text-blue-600">{viewingRecord.value}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-500">Status</label>
                  <span className={`inline-block px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(viewingRecord.status)}`}>
                    {viewingRecord.status}
                  </span>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-500">Created</label>
                  <p className="text-lg font-semibold text-gray-800">
                    {new Date(viewingRecord.createdAt).toLocaleDateString()}
                  </p>
                </div>
              </div>

              {/* Additional Details */}
              {viewingRecord.details && Object.keys(viewingRecord.details).length > 0 && (
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-3">Additional Details</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {Object.entries(viewingRecord.details).map(([key, value]) => (
                      <div key={key}>
                        <label className="block text-sm font-medium text-gray-500">
                          {key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                        </label>
                        <p className="text-lg font-semibold text-gray-800">{value}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex space-x-3 pt-4">
                <button
                  onClick={() => {
                    setIsDetailOpen(false);
                    handleEdit(viewingRecord);
                  }}
                  className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-medium transition-colors duration-200 flex items-center space-x-2"
                >
                  <Edit3 className="w-4 h-4" />
                  <span>Edit Record</span>
                </button>
                <button
                  onClick={() => setIsDetailOpen(false)}
                  className="bg-gray-300 hover:bg-gray-400 text-gray-700 px-6 py-2 rounded-lg font-medium transition-colors duration-200"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </main>
  );
}

export default Analytics;